import visidia.simulation.process.algorithm.Algorithm;
import visidia.simulation.process.algorithm.SynchronousAlgorithm;
import visidia.simulation.process.edgestate.MarkedState;
import visidia.simulation.process.messages.IntegerMessage;
import visidia.simulation.process.messages.StringMessage;
import visidia.simulation.process.messages.VectorMessage;
import visidia.simulation.process.messages.Message;
import visidia.simulation.process.messages.Door;
import visidia.graph.Graph;
import visidia.graph.Vertex;
import visidia.graph.Edge;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.awt.Color;
import java.util.Random;
import java.awt.Point;
import java.util.Enumeration;

public class Routing extends SynchronousAlgorithm{
	public static final Double INF = new Double(1<<20);
	private static Double xMax = new Double(-INF);
	private static Double yMax = new Double(-INF);
	private static Double xMin = new Double(+INF);
	private static Double yMin = new Double(+INF);
	private static Boolean compromised = new Boolean(false);
	private static Boolean graphBuilt = new Boolean(false);
	private static Vector<Edge> addedEdges = new Vector<Edge>();
	private static Boolean[][] connections = null;
	protected Random rand = new Random();
	protected static Integer iterationNumber = 0;
	private double xPos;
	private double yPos;
	private Point pos;
	private Vector<Point> neighborLocs;

	@Override
	public Object clone(){
		return new Routing();
	}

	private void updateGraphSize(){
		synchronized(xMax){
			this.xMax = Math.max(this.xPos,xMax);
			this.yMax = Math.max(this.yPos,yMax);
			this.xMin = Math.min(this.xPos,xMin);
			this.yMin = Math.min(this.yPos,yMin);
		}
	}

	private void updatePosition(){
		this.pos = this.vertex.getPos();
		this.xPos = this.vertex.getPos().getX();
		this.yPos = this.vertex.getPos().getY();
	}

	protected Point getPosition(){
		return new Point(this.pos);
	}

	protected Point getRandPoint(){
		
		double xRand = this.xMin+(this.xMax-this.xMin)*rand.nextDouble();
		double yRand = this.yMin+(this.yMax-this.yMin)*rand.nextDouble();
		//System.out.println(String.valueOf(xRand)+" "+String.valueOf(yRand));
		return new Point((int)xRand,(int)yRand);
	}

	protected double getDist(Point p1,Point p2){
		return Math.sqrt((Math.pow((p1.getX()-p2.getX()),2)+Math.pow((p1.getY()-p2.getY()),2)));
	}

	protected int getClosestDoor(Point p){
		double minDist = this.getDist(p,this.pos);
		int minDoor = -1;
		for(int i = 0;i<neighborLocs.size();i++){
			if( this.getDist(p,neighborLocs.elementAt(i))  < minDist ){
				minDoor = i;
				minDist = this.getDist(p,neighborLocs.elementAt(i));
			}
		}
		//System.out.println(String.valueOf(p)+" "+String.valueOf(this.pos)+" "+String.valueOf(minDist));
		return minDoor;
	}

	protected boolean forwardMessage(Point p,Message msg){
		int dest = this.getClosestDoor(p);
		//System.out.println(String.valueOf(p)+" "+String.valueOf(dest)+" "+String.valueOf(neighborLocs.size()));
		if(dest == -1) return false;
		else this.sendTo(dest,new SensorMessage((SensorMessage)msg));
		return true;
	}

	protected void checkInbox(){
		Door d = new Door();
		while(this.anyMsg()){
			SensorMessage msg = (SensorMessage)this.receive(d);
			// If forward message return false then process the message
			this.forwardMessage(msg.getDest(),msg);
		}
	}

	protected void setUpRouting(){
		this.updatePosition();
		this.updateGraphSize();
		int noOfNeighbors = this.getArity();
		this.neighborLocs = new Vector<Point>();
		for(int i=0;i<noOfNeighbors;i++) this.neighborLocs.addElement(this.vertex.getNeighborByDoor(i).getPos());
	}

	@Override
	public void init(){
		this.setUpRouting();
		this.nextPulse();
		//System.out.println(String.valueOf(this.getId())+String.valueOf(this.pos));
		while(true){
			Point randP = this.getRandPoint();
			//if(this.getId() == 0) this.forwardMessage(randP,(Message)(new SensorMessage("HELLO",randP)));
			this.checkInbox();
			this.nextPulse();
		}

	}
	public void unCompromise(){
		synchronized(compromised){
			if(compromised) compromised = false;
		}
	}

	public void compromise(int percent){
		synchronized(compromised){
			if(!compromised){
				Graph g = this.proc.getServer().getConsole().getGraph();
				for(int i=0;i<this.getNetSize();i++) g.getVertex(i).setLabel(new String("N"));
				this.clone(0);
				int N = ((this.getNetSize())*percent)/100;
				System.out.println(this.iterationNumber);
				Double x1Compr = new Double((0000.0/3.0) - 1.0);
				Double y1Compr = new Double((0000.0/3.0) - 1.0);
				Double x2Compr = new Double((1000.0/3.0) + 1.0);
				Double y2Compr = new Double((1000.0/3.0) + 1.0);
				if( this.iterationNumber%4 == 0){
					x1Compr += 1000.0/3.0;
					x2Compr += 1000.0/3.0;
					if(x1Compr > (1000.0-1)){
						x1Compr = 0.0;
						x2Compr = 1000.0/3.0;
						y1Compr += 1000.0/3.0;
						y2Compr += 1000.0/3.0;
					}
				}
				Vector<Integer> temp = new Vector<Integer>();
				for(int i=0;i<this.getNetSize() && N>0;i++){
					//System.out.println(N);
					Vertex v = g.getVertex(i);
					Double vx = new Double(v.getPos().getX());
					Double vy = new Double(v.getPos().getY());
					if( v.getLabel().toString().equals(new String("P")) ) continue;
					if( vx > x1Compr && vy > y1Compr && vx < x2Compr && vy < y2Compr){
						temp.addElement(i);
					}
				}
				int C = 0;
				if(temp.size()>0) {C = rand.nextInt(temp.size());};
				//System.out.println(temp.size());
				N = ((temp.size())*percent)/100;
				while( N > 0 && temp.size() != 0){
					Vertex v = g.getVertex(temp.elementAt(C));
					temp.remove(C);
					if( !v.getLabel().toString().equals(new String("N")) ) continue;
					Double vx = new Double(v.getPos().getX());
					Double vy = new Double(v.getPos().getY());
					if( vx > x1Compr && vy > y1Compr && vx < x2Compr && vy < y2Compr){
						v.setLabel(new String("M"));
						N -= 1;
					}
					if(temp.size()>0) {C = rand.nextInt(temp.size());};
				}
				compromised = true;
			}
		}
	}

	public void clone(double proximity){
		Graph g = this.proc.getServer().getConsole().getGraph();
		int C1,C2;
		C1 = rand.nextInt(this.getNetSize());
		C2 = rand.nextInt(this.getNetSize());
		while( this.getDist(g.getVertex(C1).getPos(),g.getVertex(C2).getPos()) < proximity ){
			C1 = rand.nextInt(this.getNetSize());
			C2 = rand.nextInt(this.getNetSize());
		}
		g.getVertex(C1).setLabel(new String("P"));
		g.getVertex(C2).setLabel(new String("P"));
	}
	
	public void randomizePos(){
		Point p = this.getRandPoint();
		this.vertex.getView().setPosition((int)p.getX(),(int)p.getY());
		this.updatePosition();
		this.updateGraphSize();
	}

	public void fillProximity(int proximity){
		synchronized(graphBuilt){
			if(connections == null){
				connections = new Boolean[this.getNetSize()][this.getNetSize()];
			}
		}
		int i = this.getId();
		Graph g = this.proc.getServer().getConsole().getGraph();
		for(int j=i+1;j<this.getNetSize();j++){
			Vertex v = g.getVertex(j);
			if(this.getDist(this.vertex.getPos(),v.getPos()) < proximity ){
				connections[i][j] = true;
				synchronized(addedEdges){addedEdges.addElement(this.vertex.linkTo(v,false));}
			}else{
				connections[i][j] = false;
			}
		}
	}

	public void buildGraph(int proximity){
		synchronized(graphBuilt){
			if(!graphBuilt){
				Graph g = this.proc.getServer().getConsole().getGraph();
				addedEdges = new Vector<Edge>();
				/*for(int i=0;i<this.getNetSize();i++){
					Vertex v1 = g.getVertex(i);
					for(int j=i+1;j<this.getNetSize();j++){
						Vertex v2 = g.getVertex(j);
						v1.unlink(v2);
					}
				}*/
				//System.out.println("Done");
				for(int i=0;i<this.getNetSize();i++){
					Vertex v1 = g.getVertex(i);
					for(int j=i+1;j<this.getNetSize();j++){
						Vertex v2 = g.getVertex(j);
						if( this.getDist(v1.getPos(),v2.getPos()) < proximity ){
							//System.out.println("Linking "+String.valueOf(v1.getId())+" "+String.valueOf(v2.getId()));
							addedEdges.addElement(v1.linkTo(v2,false));
						}
					}
				}
				graphBuilt = true;
			}
		}
	}

	public void destroyGraph(){
		synchronized(graphBuilt){
			if(graphBuilt){
				for(int i=0;i<addedEdges.size();i++){
					if( addedEdges.elementAt(i) != null) addedEdges.elementAt(i).remove();
					//System.out.println("Unlinking");
				}
				addedEdges.clear();
				graphBuilt = false;
			}
		}
	}
}
/*
650.0 680.0 - 4,5
647 707
4 538 362
5 751 208
Get the neighbors positions
Send a message
Receive a message
Forward a message
dcbdabc
x1,y1 
*/
