package visidia.io.gml;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import java.io.FileWriter;
import java.util.Enumeration;

import javax.swing.text.GapContent;

import visidia.graph.Graph;
import visidia.graph.Vertex;
import visidia.gui.graphview.EdgeView;
import visidia.gui.graphview.GraphView;
import visidia.gui.graphview.VertexView;
import visidia.io.GraphIO;
import visidia.io.gml.parser.GMLParser;
import visidia.misc.VisidiaSettings;
import visidia.graph.Edge;

// TODO: Auto-generated Javadoc
/**
 * This class deals with input/output operations on graphs, in GML file format.
 */
public class GMLGraphIO extends GraphIO {

	/** The file writer. */
	private FileWriter fileWriter = null;

	/** the current indentation used in the output GML file. */
	protected static String indentString = new String("");

	/**
	 * Instantiates a new GML graph input/output.
	 * 
	 * @param file the file
	 */
	public GMLGraphIO(File file) {
		super(file);
	}

	/**
	 * Loads the current file as a graph view.
	 * 
	 * @return the graph view
	 * 
	 * @see visidia.io.GraphIO#load()
	 */
	@Override
	public GraphView load() {
		InputStream inStream = null;
		GraphView graphView = null;

		try {
			inStream = new BufferedInputStream(new FileInputStream(this.file));
			GMLParser parser = new GMLParser(inStream);
			graphView = parser.Input();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				inStream.close();
			} catch (IOException e) {
			}
		}

		return graphView;
	}

	/**
	 * Saves the current graph view (with graphics attributes) or graph (without graphics attributes).
	 * 
	 * @param object the object
	 * 
	 * @see visidia.io.GraphIO#save(java.lang.Object)
	 */
	@Override
	public void save(Object object) {
		if (!(object instanceof GraphView) && !(object instanceof Graph)) return;

		try {
			// write in the object output stream
			fileWriter = new FileWriter(file);
			if (object instanceof GraphView) createGMLFile((GraphView) object);
			else if (object instanceof Graph) createGMLFile((Graph) object);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * Creates the GML file.
	 * 
	 * @param graphView the graph view
	 * 
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private void createGMLFile(GraphView graphView) throws IOException {
		boolean saveGraphicsInfo = true;
		write("graph [");
		indentMore();
		writeln("comment \"Generated by ViSiDiA\" ");
		//directed graph
		if (VisidiaSettings.getInstance().getBoolean(VisidiaSettings.Constants.DIRECTED_GRAPH))
			writeln("directed 1");
		else writeln("directed 0");
		
		// write the vertices
		Enumeration<VertexView>	vertices = graphView.getVertexItems();
		while (vertices.hasMoreElements()) {
			VertexView view = vertices.nextElement();
			writeln("node [");
			indentMore();
			writeln("id " + view.getVertex().getId());
			writeln("label \"" + view.getVertex().getLabel()+"\"");
			if (saveGraphicsInfo) {
				writeln("graphics [");
				indentMore();
				writeln("x " + view.getPosition().x);
				writeln("y " + view.getPosition().y);
				indentLess();
				writeln("]");
			}
			indentLess();
			writeln("]");
		}

		// write the edges
		Enumeration<EdgeView> edges = graphView.getEdgeItems();
		while (edges.hasMoreElements()) {
			EdgeView view = edges.nextElement();
			writeln("edge [");
			indentMore();
			VertexView origin = view.getOrigin();
			VertexView destination = view.getDestination();
			writeln("source " + origin.getVertex().getId());
			writeln("target " + destination.getVertex().getId());
			writeln("label \""+view.getEdge().getLabel()+"\"");
			writeln("weight "+view.getEdge().getWeight());
			indentLess();
			writeln("]"); // for edges
			if (VisidiaSettings.getInstance().getBoolean(VisidiaSettings.Constants.DIRECTED_GRAPH) && !view.getEdge().isOriented()){
				writeln("edge [");
				indentMore();
				origin = view.getDestination();
				destination = view.getOrigin();
				writeln("source " + origin.getVertex().getId());
				writeln("target " + destination.getVertex().getId());
				indentLess();
				writeln("]");
			}
		}
		indentLess();
		writeln("]"); // for graph

		fileWriter.close();
	}

	/**
	 * Creates the GML file.
	 * 
	 * @param graph the graph
	 * 
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private void createGMLFile(Graph graph) throws IOException {
		write("graph [");
		indentMore();
		writeln("comment \"Generated by ViSiDiA\" ");
		if (graph.getEdges().hasMoreElements() && graph.getEdges().nextElement().isOriented())
			writeln("directed 1");
		else writeln("directed 0");
		// write the vertices
		Enumeration<Vertex> vertices = graph.getVertices();
		while (vertices.hasMoreElements()) {
			Vertex v = vertices.nextElement();
			writeln("node [");
			indentMore();
			writeln("id " + v.getId());
			writeln("label \"" + v.getLabel()+"\"");
			indentLess();
			writeln("]");
		}

		// write the edges
		Enumeration<Edge> edges = graph.getEdges();
		while (edges.hasMoreElements()) {
			Edge e = edges.nextElement();
			writeln("edge [");
			indentMore();
			writeln("source " + e.getOrigin().getId());
			writeln("target " + e.getDestination().getId());
			writeln("label \""+e.getLabel()+"\"");
			writeln("weight "+e.getWeight());
			indentLess();
			writeln("]"); // for edges
		}
		indentLess();
		writeln("]"); // for graph

		fileWriter.close();
	}

	/**
	 * Writes the string in the buffer.
	 * 
	 * @param stringToWrite the string to write
	 * 
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private void write(String stringToWrite) throws IOException {
		fileWriter.write(stringToWrite);
		fileWriter.flush();
	}

	/**
	 * Writes the string in a new line, with the correct indentation.
	 * 
	 * @param stringToWrite the string to write
	 * 
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	private void writeln(String stringToWrite) throws IOException {
		fileWriter.write("\n" + indentString + stringToWrite);
		fileWriter.flush();
	}

	/**
	 * Adds some spaces to the indent string.
	 */
	private void indentMore() {
		indentString = indentString.concat("   ");
	}

	/**
	 * Removes some spaces to the indent string.
	 */
	private void indentLess() {
		if (indentString.length() < 3) {
			indentString = new String("");
		} else {
			indentString = indentString.substring(0, indentString.length() - 3);
		}
	}

}
