#!/usr/bin/python3
import sys
import random

class node:
	def __init__(self,srno,label,x,y):
		self.srno = srno
		self.label = label
		self.x = x
		self.y = y

	def __str__(self):
		return '   node [\n      id {}\n      label "{}"\n      graphics [\n         x {}\n         y {}\n      ]\n   ]'.format(self.srno,self.label,self.x,self.y)

class edge:
	def __init__(self,source,target):
		self.source = source
		self.target = target

	def __str__(self):
		return '   edge [\n      source {}\n      target {}\n      label ""\n      weight 1.0\n   ]'.format(self.source,self.target)


def randomLoc(Xmax,Ymax,Xmin = 0,Ymin = 0):
	return (random.randint(Xmin,Xmax),random.randint(Ymin,Ymax))

def dist(A,B):
	return ( (A.x-B.x)**2 + (A.y-B.y)**2 )**0.5

fileHeader = """graph [
   comment "Generated by ViSiDiA" 
   directed 0"""

def isCompromised(X,Y,X1Comp,Y1Comp,X2Comp,Y2Comp):
	return X>=X1Comp and X<=X2Comp and Y>=Y1Comp and Y<=Y2Comp



def genGraph(Xmax=1000,Ymax=1000,sep=100):
	nodes = []
	compromisedNodeIds = []
	srno = 0;
	for y in range(0,Ymax,sep):
		nodes += [[]]
		for x in range(0,Xmax,sep):
			if random.randint(0,1)%2 == 0 and srno<50:
				nodes[y//sep] += [node(srno,"N",x,y)]
				srno += 1

	edges = []

	def inRange(x,y):
		return x>=0 and y>=0 and x<len(nodes[0]) and y<len(nodes)

	nodes = [x for y in nodes for x in y]
	proximity = 363
	for x in range(len(nodes)):
		for y in range(x+1,len(nodes)):
			if dist(nodes[x],nodes[y]) <= proximity:
				edges += [edge(nodes[x].srno,nodes[y].srno)]
	if False:
		for y in range(len(nodes)):
			for x in range(len(nodes[y])):
				if inRange(x+1,y):
					edges += [edge(nodes[y][x+1].srno,nodes[y][x].srno)]
				if inRange(x,y+1):
					edges += [edge(nodes[y+1][x].srno,nodes[y][x].srno)]
				if inRange(x+2,y):
					edges += [edge(nodes[y][x+2].srno,nodes[y][x].srno)]
				if inRange(x,y+2):
					edges += [edge(nodes[y+2][x].srno,nodes[y][x].srno)]
				if inRange(x+1,y+1):
					edges += [edge(nodes[y+1][x+1].srno,nodes[y][x].srno)]
				if inRange(x-1,y+1):
					edges += [edge(nodes[x-1][y+1].srno,nodes[y][x].srno)]

	clonedNodeIds = genClones(nodes,sep*2)
	compromisedNodeIds = compromiseNodes(srno//10,nodes,sep*2,Xmax//3,Ymax//3,2*Xmax//3,2*Ymax//3)
	print(fileHeader)
	for x in nodes: print(x)
	for x in edges: print(x)
	print("]")
	


def compromiseNodes(noOfNodes,nodes,threshold,X1Comp,Y1Comp,X2Comp,Y2Comp):
	compromisedNodeIds = []
	comprNodes = []
	for x in nodes:
		if noOfNodes == 0:break
		valid = True
		if x.label == "P": continue
		if not(isCompromised(x.x,x.y,X1Comp,Y1Comp,X2Comp,Y2Comp)): continue
		compromisedNodeIds += [x.srno]
		comprNodes += [x]
		x.label = "M"
		noOfNodes -= 1

	return compromisedNodeIds

def genClones(nodes,threshold):
	# Randomly select two clones atleat twice the proximity i.e. threshold = 2*proximity
	n1 = random.randint(0,len(nodes)-1)
	n2 = random.randint(0,len(nodes)-1)
	while dist(nodes[n1],nodes[n2]) < threshold:
		n1 = random.randint(0,len(nodes)-1)
		n2 = random.randint(0,len(nodes)-1)
	nodes[n1].label = "P"
	nodes[n2].label = "P"
	clonedNodes = [nodes[n1].srno,nodes[n2].srno]
	return clonedNodes

if __name__ == '__main__':
	if(len(sys.argv) != 4):print("Usage: {} <MaximumX> <MaximumY> <Seperation> ".format(sys.argv[0]))
	else: 
		args = [int(sys.argv[x]) for x in range(1,4)]
		genGraph(args[0],args[1],args[2])

